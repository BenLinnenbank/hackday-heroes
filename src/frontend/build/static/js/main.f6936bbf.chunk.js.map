{"version":3,"sources":["assets/universe.png","components/Universe.js","components/Good.js","components/Evil.js","components/ChosenPath.js","components/Story.js","components/Renderer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Universe","props","onClick","handleClick","src","require","className","alt","Good","Evil","ChosenPath","path","usersChoice","console","log","goodOrEvil","Story","useState","setUsersChoice","userHasChosen","setUserHasChosen","renderGoodOrEvil","Renderer","userReady","setUserReady","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,sC,wGCe5BC,MAbf,SAAkBC,GAChB,OACE,oCACE,yBAAKC,QAASD,EAAME,aAClB,yBAAKC,IAAKC,EAAQ,IAA2BC,UAAU,WAAWC,IAAI,cAExE,0JCISC,MAVf,WACE,OACE,6BACE,0CCOSC,MAVf,WACE,OACE,6BACE,0CCkBSC,MArBf,SAAoBT,GAClB,IAAMU,EAAOV,EAAMW,YAEnB,OADAC,QAAQC,IAAIH,GAEV,6BACE,gDAMJ,SAAoBA,GAClB,IAAa,IAATA,EACF,MAAO,YAET,IAAa,IAATA,EACF,MAAO,YAVcI,CAAWJ,GADhC,OCoCSK,MAtCf,WAAkB,IAAD,EACuBC,mBAAS,MADhC,mBACRL,EADQ,KACKM,EADL,OAE2BD,oBAAS,GAFpC,mBAERE,EAFQ,KAEOC,EAFP,KAIf,IAAKD,EACH,OACE,6BACE,4CACA,4BAAQjB,QAAS,kBAAMgB,GAAe,KAAtC,YACA,4BAAQhB,QAAS,kBAAMgB,GAAe,KAAtC,YASN,WACE,IAAoB,IAAhBN,EACF,OACA,oCACE,kBAAC,EAAD,MACA,4BAAQV,QAAS,kBAAMkB,GAAiB,KAAxC,oBAIJ,IAAoB,IAAhBR,EACF,OACA,oCACE,kBAAC,EAAD,MACA,4BAAQV,QAAS,kBAAMkB,GAAiB,KAAxC,oBArBCC,IAIP,GAAIF,EACF,OAAO,kBAAC,EAAD,CAAYP,YAAaA,KCGrBU,MAnBf,WAAqB,IAAD,EACgBL,oBAAS,GADzB,mBACXM,EADW,KACAC,EADA,KAGlB,OAAID,EAEA,kBAAC,EAAD,MAIA,kBAAC,EAAD,CAAUpB,YAId,WACEqB,GAAa,GACbX,QAAQC,IAAI,2B,MCLDW,MAVf,WACE,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.f6936bbf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/universe.c5f81d5e.png\";","import React from 'react';\n\nfunction Universe(props) {\n  return (\n    <>\n      <div onClick={props.handleClick}>\n        <img src={require(\"../assets/universe.png\")} className=\"App-logo\" alt=\"universe\" />\n      </div>\n      <p>\n            Welcome human, you have traversed to a place between time and space because we need you to bring balance to planet Earth.\n      </p>\n    </>\n  )\n}\n\nexport default Universe;","import React from 'react';\n\nfunction Good() {\n  return (\n    <div>\n      <p>\n        i am good\n      </p>\n    </div>\n  );\n}\n\nexport default Good;","import React from 'react';\n\nfunction Evil() {\n  return (\n    <div>\n      <p>\n        i am evil\n      </p>\n    </div>\n  );\n}\n\nexport default Evil;","import React from 'react';\n\nfunction ChosenPath(props) {\n  const path = props.usersChoice;\n  console.log(path);\n  return (\n    <div>\n      <p>\n        You've chosen the {goodOrEvil(path)}.\n      </p>\n    </div>\n  );\n\n  function goodOrEvil(path) {\n    if (path === true) {\n      return \"good side\";\n    }\n    if (path === false) {\n      return \"dark side\";\n    }\n  }\n}\n\nexport default ChosenPath;","import React, { useState } from 'react';\nimport Good from './Good';\nimport Evil from './Evil';\nimport ChosenPath from './ChosenPath';\n\nfunction Story() {\n  const [usersChoice, setUsersChoice] = useState(null);\n  const [userHasChosen, setUserHasChosen] = useState(false);\n  \n  if (!userHasChosen) {\n    return (\n      <div>\n        <p>Choose wisely</p>\n        <button onClick={() => setUsersChoice(true)}>Good Boy</button>\n        <button onClick={() => setUsersChoice(false)}>Darkside</button>\n        {renderGoodOrEvil()}\n      </div>\n    );\n    }\n  if (userHasChosen) {\n    return <ChosenPath usersChoice={usersChoice}/>\n  }\n\n  function renderGoodOrEvil() {\n    if (usersChoice === true) {\n      return (\n      <>\n        <Good />\n        <button onClick={() => setUserHasChosen(true)}>Are you certain</button>\n      </>\n      )\n    } \n    if (usersChoice === false) {\n      return (\n      <>\n        <Evil />\n        <button onClick={() => setUserHasChosen(true)}>Are you certain</button>\n      </>\n      )\n    }\n  }\n}\n\nexport default Story;","import React, { useState} from 'react';\nimport Universe from './Universe';\nimport Story from './Story'\n\nfunction Renderer() {\n  const [userReady, setUserReady] = useState(false);\n  \n  if (userReady) {\n    return (\n      <Story />\n    )\n  } else {\n    return (\n      <Universe handleClick={handleClick} />\n    )\n  }\n\n  function handleClick() {\n    setUserReady(true);\n    console.log('hey this is working');\n  }\n}\n\nexport default Renderer;","import React from 'react';\nimport Renderer from './components/Renderer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Renderer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}